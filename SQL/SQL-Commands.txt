SELECT - This command is used to retrieve data from one or more database tables.
Example: SELECT * FROM customers;

INSERT - This command is used to add new data to a database table.
Example: INSERT INTO customers (name, email) VALUES ('John Doe', 'johndoe@email.com');

UPDATE - This command is used to modify existing data in a database table.
Example: UPDATE customers SET name='Jane Smith' WHERE id=1;

DELETE - This command is used to remove data from a database table.
Example: DELETE FROM customers WHERE id=1;

CREATE - This command is used to create a new database table.
Example: CREATE TABLE customers (id INT, name VARCHAR(255), email VARCHAR(255));

DROP - This command is used to remove a database table.
Example: DROP TABLE customers;

ALTER - This command is used to modify the structure of a database table.
Example: ALTER TABLE customers ADD COLUMN phone_number VARCHAR(20);

TRUNCATE - This command is used to remove all data from a database table.
Example: TRUNCATE TABLE customers;

INDEX - This command is used to create an index on a database table to improve search performance.
Example: CREATE INDEX idx_customers_name ON customers (name);

JOIN - This command is used to combine data from two or more database tables.
Example: SELECT * FROM customers JOIN orders ON customers.id = orders.customer_id;

SELECT: Used to retrieve data from a table.
Example: SELECT * FROM employees;

INSERT INTO: Used to insert data into a table.
Example: INSERT INTO employees (first_name, last_name) VALUES ('John', 'Doe');

UPDATE: Used to modify data in a table.
Example: UPDATE employees SET salary = 50000 WHERE employee_id = 1;

DELETE: Used to delete data from a table.
Example: DELETE FROM employees WHERE employee_id = 1;

CREATE DATABASE: Used to create a new database.
Example: CREATE DATABASE my_database;

CREATE TABLE: Used to create a new table.
Example: CREATE TABLE employees (employee_id INT, first_name VARCHAR(50), last_name VARCHAR(50), salary INT);

ALTER TABLE: Used to modify the structure of a table.
Example: ALTER TABLE employees ADD COLUMN email VARCHAR(50);

DROP TABLE: Used to delete a table from a database.
Example: DROP TABLE employees;

DROP DATABASE: Used to delete a database.
Example: DROP DATABASE my_database;

TRUNCATE TABLE: Used to delete all data from a table.
Example: TRUNCATE TABLE employees;

UNION: Used to combine the result sets of two or more SELECT statements.
Example: SELECT first_name FROM employees UNION SELECT first_name FROM contractors;

UNION ALL: Used to combine the result sets of two or more SELECT statements, including duplicates.
Example: SELECT first_name FROM employees UNION ALL SELECT first_name FROM contractors;

INNER JOIN: Used to retrieve data that appears in both tables.
Example: SELECT employees.first_name, departments.department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;

LEFT JOIN: Used to retrieve all data from the left table and matching data from the right table.
Example: SELECT employees.first_name, departments.department_name FROM employees LEFT JOIN departments ON employees.department_id = departments.department_id;

RIGHT JOIN: Used to retrieve all data from the right table and matching data from the left table.
Example: SELECT employees.first_name, departments.department_name FROM employees RIGHT JOIN departments ON employees.department_id = departments.department_id;

FULL OUTER JOIN: Used to retrieve all data from both tables.
Example: SELECT employees.first_name, departments.department_name FROM employees FULL OUTER JOIN departments ON employees.department_id = departments.department_id;

GROUP BY: Used to group rows with identical data into summary rows.
Example: SELECT department_id, COUNT(*) FROM employees GROUP BY department_id;

HAVING: Used to filter the results of a GROUP BY clause.
Example: SELECT department_id, COUNT() FROM employees GROUP BY department_id HAVING COUNT() > 10;

ORDER BY: Used to sort the result set in ascending or descending order.
Example: SELECT first_name, last_name FROM employees ORDER BY last_name ASC;

ASC: Used with ORDER BY to sort the result set in ascending order.
Example: SELECT first_name, last_name FROM employees ORDER BY last_name ASC;

DESC: Used with ORDER BY to sort the result set in descending order.
Example: SELECT first_name, last_name FROM employees ORDER BY last_name DESC;

COUNT: Used to count the number of rows in a table.
Example: SELECT COUNT(*) FROM employees;

MAX: Used to retrieve the maximum value in a column.
Example: SELECT MAX(salary) FROM employees;

MIN: Used to retrieve the minimum value in a column.
Example: SELECT MIN(salary) FROM employees;

AVG: Used to retrieve the average value in a column.
Example: SELECT AVG(salary) FROM employees;

SUM: Used to retrieve the sum of values in a column.
Example: SELECT SUM(salary) FROM employees;

LIKE: Used to filter rows based on a pattern.
Example: SELECT first_name FROM employees WHERE first_name LIKE 'J%';

IN: Used to filter rows based on a list of values.
Example: SELECT first_name FROM employees WHERE department_id IN (1, 2, 3);

BETWEEN: Used to filter rows based on a range of values.
Example: SELECT first_name FROM employees WHERE salary BETWEEN 50000 AND 75000;

NOT: Used to negate a condition.
Example: SELECT first_name FROM employees WHERE NOT department_id = 1;

EXISTS: Used to check for the existence of a record.
Example: SELECT * FROM employees WHERE EXISTS (SELECT * FROM departments WHERE employees.department_id = departments.department_id);

NOT EXISTS: Used to check for the non-existence of a record.
Example: SELECT * FROM employees WHERE NOT EXISTS (SELECT * FROM departments WHERE employees.department_id = departments.department_id);

ANY: Used to compare a value to any value in a subquery.
Example: SELECT first_name FROM employees WHERE salary > ANY (SELECT salary FROM contractors);

ALL: Used to compare a value to all values in a subquery.
Example: SELECT first_name FROM employees WHERE salary > ALL (SELECT salary FROM contractors);

GROUP_CONCAT: Used to concatenate strings from multiple rows into a single string.
Example: SELECT department_id, GROUP_CONCAT(first_name) FROM employees GROUP BY department_id;

CONCAT: Used to concatenate strings.
Example: SELECT CONCAT(first_name, ' ', last_name) FROM employees;

LEFT: Used to extract a specified number of characters from the left of a string.
Example: SELECT LEFT(first_name, 3) FROM employees;

RIGHT: Used to extract a specified number of characters from the right of a string.
Example: SELECT RIGHT(last_name, 3) FROM employees;

SUBSTRING: Used to extract a specified number of characters from a string.
Example: SELECT SUBSTRING(first_name, 2, 3) FROM employees;

REPLACE: Used to replace a specified substring with another string.
Example: SELECT REPLACE(email, '@example.com', '@gmail.com') FROM employees;

TRIM: Used to remove leading and trailing whitespace from a string.
Example: SELECT TRIM(first_name) FROM employees;

DATE: Used to retrieve the current date.
Example: SELECT DATE(NOW()) FROM employees;

CURDATE: Used to retrieve the current date.
Example: SELECT CURDATE() FROM employees;

NOW: Used to retrieve the current date and time.
Example: SELECT NOW() FROM employees;

DATE_FORMAT: Used to format dates.
Example: SELECT DATE_FORMAT(hire_date, '%Y-%m-%d') FROM employees;

IF: Used to conditionally return a value.
Example: SELECT IF(salary > 50000, 'High', 'Low') FROM employees;

CASE: Used to conditionally return a value based on multiple conditions.
Example: SELECT
CASE
WHEN salary > 75000 THEN 'Very high'
WHEN salary > 50000 THEN 'High'
ELSE 'Low'
END
FROM employees;

RAND: Used to generate a random number.
Example: SELECT RAND() FROM employees;

LIMIT: Used to limit the number of rows returned by a query.
Example: SELECT * FROM employees LIMIT 10;

OFFSET: Used to skip a specified number of rows before returning the rest of the results.
Example: SELECT * FROM employees LIMIT 10 OFFSET 10;

UNION: Used to combine the results of two or more SELECT statements into a single result set.
Example: SELECT first_name FROM employees WHERE department_id = 1 UNION SELECT first_name FROM contractors;

UNION ALL: Used to combine the results of two or more SELECT statements into a single result set, including duplicate values.
Example: SELECT first_name FROM employees WHERE department_id = 1 UNION ALL SELECT first_name FROM contractors;

INTERSECT: Used to return the common rows between two SELECT statements.
Example: SELECT first_name FROM employees WHERE department_id = 1 INTERSECT SELECT first_name FROM contractors;

MINUS: Used to return the unique rows from the first SELECT statement that are not in the second SELECT statement.
Example: SELECT first_name FROM employees WHERE department_id = 1 MINUS SELECT first_name FROM contractors;

HAVING: Used to filter results based on a condition applied to the result of an aggregate function.
Example: SELECT department_id, AVG(salary) FROM employees GROUP BY department_id HAVING AVG(salary) > 50000;

CASE WHEN: Used to conditionally return a value based on multiple conditions, with specific values for each condition.
Example: SELECT
CASE
WHEN salary > 75000 THEN 'Very high'
WHEN salary > 50000 THEN 'High'
ELSE 'Low'
END
AS salary_category
FROM employees;

COALESCE: Used to return the first non-NULL value in a list of expressions.
Example: SELECT COALESCE(middle_name, first_name) FROM employees;

NVL: Used to replace NULL values with a specified value.
Example: SELECT NVL(middle_name, 'N/A') FROM employees;